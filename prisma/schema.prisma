// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Apartment {
  id              Int             @id @default(autoincrement())
  estateType      String
  location        String          @db.VarChar(255)
  dierction       String          @db.VarChar(255)
  floor           String
  services        String          @db.VarChar(255)
  apartmentStatus ApartmentStatus
  isAvailable     IsAvailable     @default(AVAILABLE)
  createdAt       DateTime        @default(now())
  price           Decimal
  space           Int               
  images          Image[]         @relation("ApartmentImages")
  video           String?         @db.VarChar(255)
}

model CommercialEstate {
  id          Int         @id @default(autoincrement())
  estateType  String
  dierction   String
  location    String
  services    String
  space       Int
  price       Decimal
  isAvailable IsAvailable @default(AVAILABLE)
  images      Image[]     @relation("CommercialEstateImages")
  video       String?     @db.VarChar(255)
}

model AgriculturalEstate {
  id          Int         @id @default(autoincrement())
  estateType  String
  dierction   String
  location    String
  description String      @db.Text
  space       Int
  price       Decimal
  isAvailable IsAvailable @default(AVAILABLE)
  images      Image[]     @relation("AgriculturalEstateImages")
}

model TouristEstate {
  id          Int         @id @default(autoincrement())
  estateType  String
  dierction   String
  location    String
  description String      @db.Text
  space       Int
  price       Decimal
  isAvailable IsAvailable @default(AVAILABLE)
  images      Image[]     @relation("TouristEstateImages")
  video       String?     @db.VarChar(255) @default("none")
}

model Pledge {
  id               Int    @id @default(autoincrement())
  descriptionBefor String @db.Text
  descriptionAfter String @db.Text
  imageBefore      Image? @relation("PledgeImageBefore")

  imageAfter Image? @relation("PledgeImageAfter")
}

model Image {
  id  Int    @id @default(autoincrement())
  url String @db.VarChar(255)

  apartment   Apartment? @relation("ApartmentImages", fields: [apartmentId], references: [id])
  apartmentId Int?

  commercialEstate   CommercialEstate? @relation("CommercialEstateImages", fields: [commercialEstateId], references: [id])
  commercialEstateId Int?

  agriculturalEstate   AgriculturalEstate? @relation("AgriculturalEstateImages", fields: [agriculturalEstateId], references: [id])
  agriculturalEstateId Int?

  touristEstate   TouristEstate? @relation("TouristEstateImages", fields: [touristEstateId], references: [id])
  touristEstateId Int?

  pledgeBefore   Pledge? @relation("PledgeImageBefore", fields: [pledgeBeforeId], references: [id])
  pledgeBeforeId Int?    @unique

  pledgeAfter   Pledge? @relation("PledgeImageAfter", fields: [pledgeAfterId], references: [id])
  pledgeAfterId Int?    @unique
}

enum ApartmentStatus {
  NEW_BUILD
  OLD_BUILD
}

enum IsAvailable {
  AVAILABLE
  SOLD
}


